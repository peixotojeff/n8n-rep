{
  "active": false,
  "connections": {
    "When clicking ‘Test workflow’": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [],
        [
          {
            "node": "HTTP Request1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request1": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request2": {
      "main": [
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code2": {
      "main": [
        [
          {
            "node": "If2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [],
        [
          {
            "node": "HTTP Request2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request3": {
      "main": [
        [
          {
            "node": "Code3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code3": {
      "main": [
        [
          {
            "node": "If3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If2": {
      "main": [
        [],
        [
          {
            "node": "HTTP Request3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request4": {
      "main": [
        [
          {
            "node": "Code4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code4": {
      "main": [
        [
          {
            "node": "If4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If3": {
      "main": [
        [],
        [
          {
            "node": "HTTP Request4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2024-11-27T12:55:35.157Z",
  "id": "8DG6LB6CEnujFCt0",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "tb",
  "nodes": [
    {
      "parameters": {},
      "id": "9fa089d9-c79a-4ada-ac64-2107082a0e80",
      "name": "When clicking ‘Test workflow’",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        600,
        500
      ]
    },
    {
      "parameters": {
        "url": "https://dev.tibiadata.com/v4/highscores/Etebra/experience/druids/1",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "application/json"
            }
          ]
        },
        "options": {}
      },
      "id": "2bbee2f0-1194-43ff-982d-94af87fd738d",
      "name": "HTTP Request",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        820,
        500
      ]
    },
    {
      "parameters": {
        "jsCode": "const nomeProcurado = 'Taiane Damanga';\nconst highscoreList = $json[\"highscores\"][\"highscore_list\"];\n\n// Verificar se o nome está na lista\nlet nomeEncontrado = false;\nfor (let i = 0; i < highscoreList.length; i++) {\n    if (highscoreList[i].name === nomeProcurado) {\n        nomeEncontrado = true;\n        break;  // Se encontrar, sai do loop\n    }\n}\n\n// Se o nome foi encontrado\nif (nomeEncontrado) {\n    return [\n        {\n            json: {\n                status: 'sucesso',\n                nome: nomeProcurado\n            }\n        }\n    ];\n} else {\n    // Caso contrário, passe para a próxima página\n    const paginaAtual = $json[\"highscores\"][\"highscore_page\"].current_page;\n    const totalPaginas = $json[\"highscores\"][\"highscore_page\"].total_pages;\n    \n    if (paginaAtual < totalPaginas) {\n        return [\n            {\n                json: {\n                    status: 'procurando',\n                    mensagem: `Nome não encontrado na página ${paginaAtual}, passando para a página ${paginaAtual + 1}.`\n                }\n            }\n        ];\n    } else {\n        return [\n            {\n                json: {\n                    status: 'erro',\n                    mensagem: 'Nome não encontrado em nenhuma das páginas.'\n                }\n            }\n        ];\n    }\n}\n"
      },
      "id": "b50f3a8a-a3a7-40b9-9cf2-024ade4e68b1",
      "name": "Code",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1020,
        500
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "4a3f0100-5049-4e86-a591-9ca961348516",
              "leftValue": "={{ $json.status }}",
              "rightValue": "sucesso",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "499b6fe8-648b-4018-8343-24d145ef8928",
      "name": "If",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1200,
        500
      ]
    },
    {
      "parameters": {
        "url": "=https://dev.tibiadata.com/v4/highscores/Etebra/experience/druids/{{1 + $('HTTP Request').item.json.highscores.highscore_page.current_page }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "application/json"
            }
          ]
        },
        "options": {}
      },
      "id": "488c0ac4-233c-4a70-95e1-2a9872ed43cd",
      "name": "HTTP Request1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        880,
        700
      ]
    },
    {
      "parameters": {
        "jsCode": "const nomeProcurado = 'Taiane Damanga';\nconst highscoreList = $json[\"highscores\"][\"highscore_list\"];\n\n// Verificar se o nome está na lista\nlet nomeEncontrado = false;\nfor (let i = 0; i < highscoreList.length; i++) {\n    if (highscoreList[i].name === nomeProcurado) {\n        nomeEncontrado = true;\n        break;  // Se encontrar, sai do loop\n    }\n}\n\n// Se o nome foi encontrado\nif (nomeEncontrado) {\n    return [\n        {\n            json: {\n                status: 'sucesso',\n                nome: nomeProcurado\n            }\n        }\n    ];\n} else {\n    // Caso contrário, passe para a próxima página\n    const paginaAtual = $json[\"highscores\"][\"highscore_page\"].current_page;\n    const totalPaginas = $json[\"highscores\"][\"highscore_page\"].total_pages;\n    \n    if (paginaAtual < totalPaginas) {\n        return [\n            {\n                json: {\n                    status: 'procurando',\n                    mensagem: `Nome não encontrado na página ${paginaAtual}, passando para a página ${paginaAtual + 1}.`\n                }\n            }\n        ];\n    } else {\n        return [\n            {\n                json: {\n                    status: 'erro',\n                    mensagem: 'Nome não encontrado em nenhuma das páginas.'\n                }\n            }\n        ];\n    }\n}\n"
      },
      "id": "cf21db31-b012-4f2f-bf09-b0d8c824cd34",
      "name": "Code1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1040,
        700
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "4a3f0100-5049-4e86-a591-9ca961348516",
              "leftValue": "={{ $json.status }}",
              "rightValue": "sucesso",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "72d436a6-5a07-46c6-916f-c953d76708f7",
      "name": "If1",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1180,
        700
      ]
    },
    {
      "parameters": {
        "url": "=https://dev.tibiadata.com/v4/highscores/Etebra/experience/druids/{{1 + $('HTTP Request1').item.json.highscores.highscore_page.current_page }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "application/json"
            }
          ]
        },
        "options": {}
      },
      "id": "aca6104e-a66e-43a2-b486-60c1107f467c",
      "name": "HTTP Request2",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        880,
        880
      ]
    },
    {
      "parameters": {
        "jsCode": "const nomeProcurado = 'Taiane Damanga';\nconst highscoreList = $json[\"highscores\"][\"highscore_list\"];\n\n// Verificar se o nome está na lista\nlet nomeEncontrado = false;\nfor (let i = 0; i < highscoreList.length; i++) {\n    if (highscoreList[i].name === nomeProcurado) {\n        nomeEncontrado = true;\n        break;  // Se encontrar, sai do loop\n    }\n}\n\n// Se o nome foi encontrado\nif (nomeEncontrado) {\n    return [\n        {\n            json: {\n                status: 'sucesso',\n                nome: nomeProcurado\n            }\n        }\n    ];\n} else {\n    // Caso contrário, passe para a próxima página\n    const paginaAtual = $json[\"highscores\"][\"highscore_page\"].current_page;\n    const totalPaginas = $json[\"highscores\"][\"highscore_page\"].total_pages;\n    \n    if (paginaAtual < totalPaginas) {\n        return [\n            {\n                json: {\n                    status: 'procurando',\n                    mensagem: `Nome não encontrado na página ${paginaAtual}, passando para a página ${paginaAtual + 1}.`\n                }\n            }\n        ];\n    } else {\n        return [\n            {\n                json: {\n                    status: 'erro',\n                    mensagem: 'Nome não encontrado em nenhuma das páginas.'\n                }\n            }\n        ];\n    }\n}\n"
      },
      "id": "e97a1cb1-9316-4276-b403-0b5dfcc2b725",
      "name": "Code2",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1040,
        880
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "4a3f0100-5049-4e86-a591-9ca961348516",
              "leftValue": "={{ $json.status }}",
              "rightValue": "sucesso",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "b9d3e7b0-33b3-4bf8-bacb-260729ad928c",
      "name": "If2",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1180,
        880
      ]
    },
    {
      "parameters": {
        "url": "=https://dev.tibiadata.com/v4/highscores/Etebra/experience/druids/{{1 + $('HTTP Request2').item.json.highscores.highscore_page.current_page }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "application/json"
            }
          ]
        },
        "options": {}
      },
      "id": "19f20d59-f8f0-47d0-ad43-98db040f0d61",
      "name": "HTTP Request3",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        880,
        1040
      ]
    },
    {
      "parameters": {
        "jsCode": "const nomeProcurado = 'Taiane Damanga';\nconst highscoreList = $json[\"highscores\"][\"highscore_list\"];\n\n// Verificar se o nome está na lista\nlet nomeEncontrado = false;\nfor (let i = 0; i < highscoreList.length; i++) {\n    if (highscoreList[i].name === nomeProcurado) {\n        nomeEncontrado = true;\n        break;  // Se encontrar, sai do loop\n    }\n}\n\n// Se o nome foi encontrado\nif (nomeEncontrado) {\n    return [\n        {\n            json: {\n                status: 'sucesso',\n                nome: nomeProcurado\n            }\n        }\n    ];\n} else {\n    // Caso contrário, passe para a próxima página\n    const paginaAtual = $json[\"highscores\"][\"highscore_page\"].current_page;\n    const totalPaginas = $json[\"highscores\"][\"highscore_page\"].total_pages;\n    \n    if (paginaAtual < totalPaginas) {\n        return [\n            {\n                json: {\n                    status: 'procurando',\n                    mensagem: `Nome não encontrado na página ${paginaAtual}, passando para a página ${paginaAtual + 1}.`\n                }\n            }\n        ];\n    } else {\n        return [\n            {\n                json: {\n                    status: 'erro',\n                    mensagem: 'Nome não encontrado em nenhuma das páginas.'\n                }\n            }\n        ];\n    }\n}\n"
      },
      "id": "28415500-49d4-4830-9bce-dae9810e9572",
      "name": "Code3",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1040,
        1040
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "4a3f0100-5049-4e86-a591-9ca961348516",
              "leftValue": "={{ $json.status }}",
              "rightValue": "sucesso",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "b9a329dd-bae3-4f81-af88-7b8229775f63",
      "name": "If3",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1180,
        1040
      ]
    },
    {
      "parameters": {
        "url": "=https://dev.tibiadata.com/v4/highscores/Etebra/experience/druids/{{1 + $('HTTP Request3').item.json.highscores.highscore_page.current_page }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "application/json"
            }
          ]
        },
        "options": {}
      },
      "id": "01081178-234a-44db-b8c0-88c9eb401174",
      "name": "HTTP Request4",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        880,
        1220
      ]
    },
    {
      "parameters": {
        "jsCode": "const nomeProcurado = 'Taiane Damanga';\nconst highscoreList = $json[\"highscores\"][\"highscore_list\"];\n\n// Verificar se o nome está na lista\nlet nomeEncontrado = false;\nfor (let i = 0; i < highscoreList.length; i++) {\n    if (highscoreList[i].name === nomeProcurado) {\n        nomeEncontrado = true;\n        break;  // Se encontrar, sai do loop\n    }\n}\n\n// Se o nome foi encontrado\nif (nomeEncontrado) {\n    return [\n        {\n            json: {\n                status: 'sucesso',\n                nome: nomeProcurado\n            }\n        }\n    ];\n} else {\n    // Caso contrário, passe para a próxima página\n    const paginaAtual = $json[\"highscores\"][\"highscore_page\"].current_page;\n    const totalPaginas = $json[\"highscores\"][\"highscore_page\"].total_pages;\n    \n    if (paginaAtual < totalPaginas) {\n        return [\n            {\n                json: {\n                    status: 'procurando',\n                    mensagem: `Nome não encontrado na página ${paginaAtual}, passando para a página ${paginaAtual + 1}.`\n                }\n            }\n        ];\n    } else {\n        return [\n            {\n                json: {\n                    status: 'erro',\n                    mensagem: 'Nome não encontrado em nenhuma das páginas.'\n                }\n            }\n        ];\n    }\n}\n"
      },
      "id": "4202b036-321e-4b38-ab9b-9c7124e285a6",
      "name": "Code4",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1040,
        1220
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "4a3f0100-5049-4e86-a591-9ca961348516",
              "leftValue": "={{ $json.status }}",
              "rightValue": "sucesso",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "94b11a17-d275-4d28-b2ea-3cff12726218",
      "name": "If4",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1180,
        1220
      ]
    }
  ],
  "pinData": {},
  "repo_name": "n8n-rep",
  "repo_owner": "peixotojeff",
  "repo_path": "peixotojeff/n8n-rep/",
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2024-11-27T18:43:50.000Z",
  "versionId": "20b1998e-950c-4958-a850-46da8df5da88"
}
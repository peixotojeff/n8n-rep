{
  "active": true,
  "connections": {
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Date & Time",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Date & Time1": {
      "main": [
        [
          {
            "node": "Google Sheets",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Sheets": {
      "main": [
        [
          {
            "node": "Discord",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request6": {
      "main": [
        [
          {
            "node": "Date & Time1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "HTTP Request6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If4": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 4
          }
        ]
      ]
    },
    "Code4": {
      "main": [
        [
          {
            "node": "If4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request4": {
      "main": [
        [
          {
            "node": "Code4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If3": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 3
          }
        ],
        [
          {
            "node": "HTTP Request4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code3": {
      "main": [
        [
          {
            "node": "If3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request3": {
      "main": [
        [
          {
            "node": "Code3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If2": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 2
          }
        ],
        [
          {
            "node": "HTTP Request3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code2": {
      "main": [
        [
          {
            "node": "If2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request2": {
      "main": [
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ],
        [
          {
            "node": "HTTP Request2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request1": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "HTTP Request1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Date & Time": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2024-11-28T00:20:30.419Z",
  "id": "AMA2RvyQES7iQov2",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "PROJETO TIBIA",
  "nodes": [
    {
      "parameters": {
        "operation": "appendOrUpdate",
        "documentId": {
          "__rl": true,
          "value": "1sFde6uvz0UdR1Vd1KJ7kflxqZd_-ydJuphesMMOLyMA",
          "mode": "id"
        },
        "sheetName": {
          "__rl": true,
          "value": 1841702513,
          "mode": "list",
          "cachedResultName": "EXP/DIA",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1TSM6r1YpX_cKqiQ1-RekAnXDycfaCF9waK6GWgLDMM0/edit#gid=1841702513"
        },
        "columnToMatchOn": "DATE",
        "valueToMatchOn": "={{ $node['Date & Time'].json.Hoje }}",
        "fieldsUi": {
          "values": [
            {
              "column": "Nome",
              "fieldValue": "={{ $('HTTP Request6').item.json.character.character.name }}"
            },
            {
              "column": "Vocation Rank",
              "fieldValue": "={{ $('HTTP Request6').item.json.character.character.vocation }}"
            },
            {
              "column": "level",
              "fieldValue": "={{ $('HTTP Request6').item.json.character.character.level }}"
            },
            {
              "column": "Experience",
              "fieldValue": "={{ $('Edit Fields').item.json.exp }}"
            },
            {
              "column": "Last Login",
              "fieldValue": "={{ $json[\"Last Login\"] }}"
            }
          ]
        },
        "options": {
          "cellFormat": "USER_ENTERED"
        }
      },
      "id": "844ba58a-e803-4993-a531-d96e79566949",
      "name": "Google Sheets",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 3,
      "position": [
        2020,
        1120
      ],
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "ZuVpCSahsAm1lTIw",
          "name": "Google Sheets Dentadura3D"
        }
      }
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {}
          ]
        }
      },
      "id": "cc928841-2a3e-401c-9ebf-883a39d7e2e0",
      "name": "Schedule Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1,
      "position": [
        80,
        740
      ]
    },
    {
      "parameters": {
        "operation": "formatDate",
        "date": "={{ $json.character.character.last_login }}",
        "format": "custom",
        "customFormat": "yyyy-LL-dd HH:MM",
        "outputFieldName": "Last Login",
        "options": {}
      },
      "id": "9e90361e-be3f-4295-951a-462db03e74f7",
      "name": "Date & Time1",
      "type": "n8n-nodes-base.dateTime",
      "typeVersion": 2,
      "position": [
        1820,
        1120
      ]
    },
    {
      "parameters": {
        "webhookUri": "https://discordapp.com/api/webhooks/1112595580728918056/0GSrTHx5rAs8MhbVjfHXd3xq3Uq_8dSRc8WKZYOKItNStekzP67-9vDrhaQsQHWKJHQf",
        "text": "=Exp diária atualizada!",
        "options": {}
      },
      "id": "96193cfe-a973-4d49-8de6-2dd0402e2215",
      "name": "Discord",
      "type": "n8n-nodes-base.discord",
      "typeVersion": 1,
      "position": [
        2240,
        1120
      ]
    },
    {
      "parameters": {
        "url": "=https://dev.tibiadata.com/v4/character/{{ $json.Nome }}",
        "options": {}
      },
      "id": "0d6f36f2-1d31-4fbf-b031-369c6151f5a4",
      "name": "HTTP Request6",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1600,
        1120
      ],
      "retryOnFail": true,
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "c5805560-b10d-41ef-be76-493600141a08",
              "name": "Nome",
              "value": "={{ $json.mensagem }}",
              "type": "string"
            },
            {
              "id": "752b7771-1699-482c-947d-80fe5a93d111",
              "name": "exp",
              "value": "={{ $json.value }}",
              "type": "number"
            }
          ]
        },
        "options": {}
      },
      "id": "7378c0b3-886d-45c1-9d4d-0a9b2f394416",
      "name": "Edit Fields",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1420,
        1100
      ]
    },
    {
      "parameters": {
        "numberInputs": 5
      },
      "id": "1e82e508-bfb7-4210-8ef4-81b831e3660c",
      "name": "Merge",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        1240,
        1060
      ]
    },
    {
      "parameters": {
        "operation": "formatDate",
        "date": "={{ $json.timestamp }}",
        "format": "yyyy-MM-dd",
        "outputFieldName": "Hoje",
        "options": {}
      },
      "id": "80ed0def-dffb-425e-886a-0cc54dcce043",
      "name": "Date & Time",
      "type": "n8n-nodes-base.dateTime",
      "typeVersion": 2,
      "position": [
        260,
        740
      ]
    },
    {
      "parameters": {
        "jsCode": "const nomeProcurado = 'Taiane Damanga';\nconst highscoreList = $json[\"highscores\"][\"highscore_list\"];\n\n// Verificar se o nome está na lista\nlet nomeEncontrado = false;\nlet valorEncontrado = null;  // Variável para armazenar o valor encontrado\n\nfor (let i = 0; i < highscoreList.length; i++) {\n    if (highscoreList[i].name === nomeProcurado) {\n        nomeEncontrado = true;\n        valorEncontrado = highscoreList[i].value;  // Armazena o valor correspondente\n        break;  // Se encontrar, sai do loop\n    }\n}\n\n// Se o nome foi encontrado\nif (nomeEncontrado) {\n    return [\n        {\n            json: {\n                status: 'sucesso',\n                mensagem: nomeProcurado,\n                value: valorEncontrado  // Valor separado\n            }\n        }\n    ];\n} else {\n    // Caso contrário, passe para a próxima página\n    const paginaAtual = $json[\"highscores\"][\"highscore_page\"].current_page;\n    const totalPaginas = $json[\"highscores\"][\"highscore_page\"].total_pages;\n    \n    if (paginaAtual < totalPaginas) {\n        return [\n            {\n                json: {\n                    status: 'procurando',\n                    mensagem: `O nome ${nomeProcurado} não foi encontrado na página ${paginaAtual}. Passando para a próxima página (${paginaAtual + 1}).`\n                }\n            }\n        ];\n    } else {\n        return [\n            {\n                json: {\n                    status: 'erro',\n                    mensagem: `O nome ${nomeProcurado} não foi encontrado em nenhuma das páginas de placares.`\n                }\n            }\n        ];\n    }\n}\n"
      },
      "id": "df855e58-8bc2-4fe3-84ad-bca5e3a6395e",
      "name": "Code3",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        780,
        1120
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "4a3f0100-5049-4e86-a591-9ca961348516",
              "leftValue": "={{ $json.status }}",
              "rightValue": "sucesso",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "a9219671-0e7b-4509-be56-4b29eea3d6dd",
      "name": "If4",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        920,
        1300
      ]
    },
    {
      "parameters": {
        "jsCode": "const nomeProcurado = 'Taiane Damanga';\nconst highscoreList = $json[\"highscores\"][\"highscore_list\"];\n\n// Verificar se o nome está na lista\nlet nomeEncontrado = false;\nlet valorEncontrado = null;  // Variável para armazenar o valor encontrado\n\nfor (let i = 0; i < highscoreList.length; i++) {\n    if (highscoreList[i].name === nomeProcurado) {\n        nomeEncontrado = true;\n        valorEncontrado = highscoreList[i].value;  // Armazena o valor correspondente\n        break;  // Se encontrar, sai do loop\n    }\n}\n\n// Se o nome foi encontrado\nif (nomeEncontrado) {\n    return [\n        {\n            json: {\n                status: 'sucesso',\n                mensagem: nomeProcurado,\n                value: valorEncontrado  // Valor separado\n            }\n        }\n    ];\n} else {\n    // Caso contrário, passe para a próxima página\n    const paginaAtual = $json[\"highscores\"][\"highscore_page\"].current_page;\n    const totalPaginas = $json[\"highscores\"][\"highscore_page\"].total_pages;\n    \n    if (paginaAtual < totalPaginas) {\n        return [\n            {\n                json: {\n                    status: 'procurando',\n                    mensagem: `O nome ${nomeProcurado} não foi encontrado na página ${paginaAtual}. Passando para a próxima página (${paginaAtual + 1}).`\n                }\n            }\n        ];\n    } else {\n        return [\n            {\n                json: {\n                    status: 'erro',\n                    mensagem: `O nome ${nomeProcurado} não foi encontrado em nenhuma das páginas de placares.`\n                }\n            }\n        ];\n    }\n}\n"
      },
      "id": "b1ed8f90-6aab-4163-aeab-35c10f17ddc3",
      "name": "Code4",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        780,
        1300
      ]
    },
    {
      "parameters": {
        "url": "=https://dev.tibiadata.com/v4/highscores/Etebra/experience/druids/{{1 + $('HTTP Request3').item.json.highscores.highscore_page.current_page }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "application/json"
            }
          ]
        },
        "options": {}
      },
      "id": "7929e82a-5286-4995-bf4e-78e7834d9f2e",
      "name": "HTTP Request4",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        620,
        1300
      ],
      "retryOnFail": true
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "4a3f0100-5049-4e86-a591-9ca961348516",
              "leftValue": "={{ $json.status }}",
              "rightValue": "sucesso",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "34412a46-baf6-4f2e-a2ea-b78f1a486237",
      "name": "If3",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        920,
        1120
      ]
    },
    {
      "parameters": {
        "url": "=https://dev.tibiadata.com/v4/highscores/Etebra/experience/druids/{{1 + $('HTTP Request2').item.json.highscores.highscore_page.current_page }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "application/json"
            }
          ]
        },
        "options": {}
      },
      "id": "6a14fed0-1b94-48a8-b896-5f9ba4d1ecdd",
      "name": "HTTP Request3",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        620,
        1120
      ],
      "retryOnFail": true
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "4a3f0100-5049-4e86-a591-9ca961348516",
              "leftValue": "={{ $json.status }}",
              "rightValue": "sucesso",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "798b87ef-2e97-4360-90c8-0338a6ee3c98",
      "name": "If2",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        920,
        960
      ]
    },
    {
      "parameters": {
        "jsCode": "const nomeProcurado = 'Taiane Damanga';\nconst highscoreList = $json[\"highscores\"][\"highscore_list\"];\n\n// Verificar se o nome está na lista\nlet nomeEncontrado = false;\nlet valorEncontrado = null;  // Variável para armazenar o valor encontrado\n\nfor (let i = 0; i < highscoreList.length; i++) {\n    if (highscoreList[i].name === nomeProcurado) {\n        nomeEncontrado = true;\n        valorEncontrado = highscoreList[i].value;  // Armazena o valor correspondente\n        break;  // Se encontrar, sai do loop\n    }\n}\n\n// Se o nome foi encontrado\nif (nomeEncontrado) {\n    return [\n        {\n            json: {\n                status: 'sucesso',\n                mensagem: nomeProcurado,\n                value: valorEncontrado  // Valor separado\n            }\n        }\n    ];\n} else {\n    // Caso contrário, passe para a próxima página\n    const paginaAtual = $json[\"highscores\"][\"highscore_page\"].current_page;\n    const totalPaginas = $json[\"highscores\"][\"highscore_page\"].total_pages;\n    \n    if (paginaAtual < totalPaginas) {\n        return [\n            {\n                json: {\n                    status: 'procurando',\n                    mensagem: `O nome ${nomeProcurado} não foi encontrado na página ${paginaAtual}. Passando para a próxima página (${paginaAtual + 1}).`\n                }\n            }\n        ];\n    } else {\n        return [\n            {\n                json: {\n                    status: 'erro',\n                    mensagem: `O nome ${nomeProcurado} não foi encontrado em nenhuma das páginas de placares.`\n                }\n            }\n        ];\n    }\n}\n"
      },
      "id": "ae22e764-8385-490b-bcff-46c012fcdc77",
      "name": "Code2",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        780,
        960
      ]
    },
    {
      "parameters": {
        "url": "=https://dev.tibiadata.com/v4/highscores/Etebra/experience/druids/{{1 + $('HTTP Request1').item.json.highscores.highscore_page.current_page }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "application/json"
            }
          ]
        },
        "options": {}
      },
      "id": "04d12beb-62a9-4ef0-bf22-6f2235ef72cf",
      "name": "HTTP Request2",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        620,
        960
      ],
      "retryOnFail": true
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "4a3f0100-5049-4e86-a591-9ca961348516",
              "leftValue": "={{ $json.status }}",
              "rightValue": "sucesso",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "8dbf1aca-5804-4e4e-8a26-a58af3660dd2",
      "name": "If1",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        920,
        780
      ]
    },
    {
      "parameters": {
        "jsCode": "const nomeProcurado = 'Taiane Damanga';\nconst highscoreList = $json[\"highscores\"][\"highscore_list\"];\n\n// Verificar se o nome está na lista\nlet nomeEncontrado = false;\nlet valorEncontrado = null;  // Variável para armazenar o valor encontrado\n\nfor (let i = 0; i < highscoreList.length; i++) {\n    if (highscoreList[i].name === nomeProcurado) {\n        nomeEncontrado = true;\n        valorEncontrado = highscoreList[i].value;  // Armazena o valor correspondente\n        break;  // Se encontrar, sai do loop\n    }\n}\n\n// Se o nome foi encontrado\nif (nomeEncontrado) {\n    return [\n        {\n            json: {\n                status: 'sucesso',\n                mensagem: nomeProcurado,\n                value: valorEncontrado  // Valor separado\n            }\n        }\n    ];\n} else {\n    // Caso contrário, passe para a próxima página\n    const paginaAtual = $json[\"highscores\"][\"highscore_page\"].current_page;\n    const totalPaginas = $json[\"highscores\"][\"highscore_page\"].total_pages;\n    \n    if (paginaAtual < totalPaginas) {\n        return [\n            {\n                json: {\n                    status: 'procurando',\n                    mensagem: `O nome ${nomeProcurado} não foi encontrado na página ${paginaAtual}. Passando para a próxima página (${paginaAtual + 1}).`\n                }\n            }\n        ];\n    } else {\n        return [\n            {\n                json: {\n                    status: 'erro',\n                    mensagem: `O nome ${nomeProcurado} não foi encontrado em nenhuma das páginas de placares.`\n                }\n            }\n        ];\n    }\n}\n"
      },
      "id": "59b85179-112a-4e0a-9010-1b24e07cdc9a",
      "name": "Code1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        780,
        780
      ]
    },
    {
      "parameters": {
        "url": "=https://dev.tibiadata.com/v4/highscores/Etebra/experience/druids/{{1 + $('HTTP Request').item.json.highscores.highscore_page.current_page }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "application/json"
            }
          ]
        },
        "options": {}
      },
      "id": "8bdf96f2-262f-4670-bb1e-7aba3bd50377",
      "name": "HTTP Request1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        620,
        780
      ],
      "retryOnFail": true
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "4a3f0100-5049-4e86-a591-9ca961348516",
              "leftValue": "={{ $json.status }}",
              "rightValue": "sucesso",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "4c28a891-e9d6-4b1c-b7a7-f5864989dc71",
      "name": "If",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        940,
        580
      ]
    },
    {
      "parameters": {
        "jsCode": "const nomeProcurado = 'Taiane Damanga';\nconst highscoreList = $json[\"highscores\"][\"highscore_list\"];\n\n// Verificar se o nome está na lista\nlet nomeEncontrado = false;\nlet valorEncontrado = null;  // Variável para armazenar o valor encontrado\n\nfor (let i = 0; i < highscoreList.length; i++) {\n    if (highscoreList[i].name === nomeProcurado) {\n        nomeEncontrado = true;\n        valorEncontrado = highscoreList[i].value;  // Armazena o valor correspondente\n        break;  // Se encontrar, sai do loop\n    }\n}\n\n// Se o nome foi encontrado\nif (nomeEncontrado) {\n    return [\n        {\n            json: {\n                status: 'sucesso',\n                mensagem: nomeProcurado,\n                value: valorEncontrado  // Valor separado\n            }\n        }\n    ];\n} else {\n    // Caso contrário, passe para a próxima página\n    const paginaAtual = $json[\"highscores\"][\"highscore_page\"].current_page;\n    const totalPaginas = $json[\"highscores\"][\"highscore_page\"].total_pages;\n    \n    if (paginaAtual < totalPaginas) {\n        return [\n            {\n                json: {\n                    status: 'procurando',\n                    mensagem: `O nome ${nomeProcurado} não foi encontrado na página ${paginaAtual}. Passando para a próxima página (${paginaAtual + 1}).`\n                }\n            }\n        ];\n    } else {\n        return [\n            {\n                json: {\n                    status: 'erro',\n                    mensagem: `O nome ${nomeProcurado} não foi encontrado em nenhuma das páginas de placares.`\n                }\n            }\n        ];\n    }\n}\n"
      },
      "id": "6a5bd0ff-9d22-41d8-9a7f-6ecb7af56b77",
      "name": "Code",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        760,
        580
      ]
    },
    {
      "parameters": {
        "url": "https://dev.tibiadata.com/v4/highscores/Etebra/experience/druids/1",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "application/json"
            }
          ]
        },
        "options": {}
      },
      "id": "a6bbf455-69b3-44f7-a733-be7bd2a1b7b7",
      "name": "HTTP Request",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        580,
        580
      ],
      "retryOnFail": true
    }
  ],
  "pinData": {},
  "repo_name": "n8n-rep",
  "repo_owner": "peixotojeff",
  "repo_path": "peixotojeff/n8n-rep/",
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": {
    "node:Schedule Trigger": {
      "recurrenceRules": []
    }
  },
  "tags": [],
  "triggerCount": 1,
  "updatedAt": "2024-11-28T13:21:07.000Z",
  "versionId": "c5c088be-8d08-43eb-b61b-59fe8e27f960"
}